Compile: 
javac server.java 
javac client.java

Commands to start the server and client programs:
java server [server name]
java client [client name]

Other commands: 
- input [quit] to quit the client program
- there is a file named [serversInfo] in directory [/tmp/92476/stream]. If this file already exists (because you had already run the server program before and then killed it, but after that you didn’t manually delete [serversInfo]), the server program would ask you if you want to restart by accessing the servers info previously recorded in [serversInfo]. Here I recommend if you don’t intentionally want to test the [restart] function, you should reply N so the program will delete [serversInfo] and start the server program as a new start instead of restart.

- implemented all the commands of P2 including: add/delete, create/remove, subscribe/unsubscribe, publish, get
- passed the test case of P2 instruction (screen shot image included in the submission)
- backup info/data of each server on its backup server (topics stored in the bkpTopics of the backup server)
- relocate partitions when servers added to/deleted from the stream platform
- the crashed/killed server can be restarted and reconnected to the stream platform (and all the clients) by input the start command: java server [server name] (should use the same [server name] as before) 
- using multi-threads on both the server and client side, the streaming platform runs via server-client and server-server socket communication.

Java files:
- server.java: where main method of the server program located at, receives commands from clients and dispatches the tasks to the server threads
- ServerThread.java: main body of the stream platform, the server threads handle the commands from clients  
- client.java: where main method of the client program located at, receives commands from user and sends them to the servers for processing
- ClientThread.java: client thread to handle messages sent from the servers (to connect to the restarted and newly added servers, disconnect to the deleted servers, display subscribed partitions, etc) 
- Record.java: <key, value> pair structure
- ServerInfo.java: record the server name, ip and port number, info is wrote into local file [serversInfo]
- ClientInfo.java: record the client name, ip and port number, info is wrote into local file [clientsInfo]
- SvrData.java: store the data and info used by the server, the data and info are wrote into local files [server name]_data/info

Files generated by the server programs are stored in [/tmp/92476/stream] (you can change the path as you like by replace the dir string [localDir] in server.java/client.java/ServerThread.java) of both machines, the program set the file access mode to 777 by calling [Runtime.getRuntime().exec("chmod 777 " + outFileName);]
1. serversInfo: record the name, ip address and port number of the servers added to the stream platform.
2. clientsInfo: record the name, ip address and port number of the clients connected to the stream platform.
3. [server name]_data: record the topics/backup topics data generated by the stream platform, including topic name, partition number, records in each partition
4. [server name]_info: record the relationships among topics, servers, clients. 
- [now] now of each partition of each topic (now is the number of records in each partition)
- [offset] offset of each partition of each topic (offset is the current record index of each partition to be accessed by the subscriber when calling [get] command)
- [numSub] number of subscribers of each topic
- [subList] subscribers of each topic
- [partSubMap] subscriber (client name) of each partition of each topic
- [partSvrMap] server name where each partition of each topic locates at
- [svrPartMap] the partitions of topics located on the server

BUG report: 

1. Cannot correctly display the ip address of the server. 
CAUSE: The ip address of servers can be correctly displayed by calling the getLocalHost() method of [InetAddress] class. This method works on 104.130.67.11. However, calling getLocalHost() method on 23.253.20.67 caused the IOException of server program. So I had to switch to getHostAddress() but the ip address returned by this method was always 0.0.0.0.

I can use line 30 to display correct ip address on my own laptop as well as 104.130.67.11. However, I have to switch to line 29 on 23.253.20.67 and the displayed ip address is always 0.0.0.0.
line 29/30 @ server.java
[line 29]: System.out.println("DEBUG: " + localServerName + " at IP address " + serverSocket.getInetAddress().getHostAddress() + " and port number: " + serverSocket.getLocalPort());
[line 30]: //System.out.println("DEBUG: " + localServerName + " at IP address " + serverSocket.getInetAddress().getLocalHost().getHostAddress() + " and port number: " + serverSocket.getLocalPort());

2. [array index out-of-bound exception] of the client program when requesting [delete servers]

For example, there are two servers s1 and s2 and two clients c1 and c2 on the streaming platform. When c1 send the [delete s2] command to both servers, c1 client program may crash because of [array index out-of-bound exception]. Anyway, s1, s2 and c2 program will still run as normal without any problem.

I tested the [delete] cmd many times and this problem occurred only occasionally, most of the time the problem didn't occur at all. 

Quick fix of the bug:
replace [line 197] of [client.java]: System.out.println(clientName + "> " + servers.get(i).getName() + ": " + fromServer); 
by System.out.println(clientName + "> " + fromServer);

or you may simply kill c1 (no response now) and restart it with the same start command as before: [java client c1].

Analysis of the problem:
I thought over this problem and it is a little tricky. The process of [delete] is as below:

1. c1 get the user input and send [delete s2] command to both s1 and s2 by setting up a new communication channel (referred as "the regular communication channel" below)

2.1 s1 will delete s2 from the [servers] (an ArrayList to store the servers info including name, ip, port number) and reply to c2 that delete command has been processed (via the regular communication channel).
2.2.1 s2 will first forward the [delete] command to all the clients (including both c1 and c2, there is an existing [listening] channel between each server and each client, which is used for the server to send event messages, including [delete server], [add server], [restart server], to the client), then reply c2 that delete command has been processed (via the regular communication channel).
2.2.2 s2 will relocate its partitions to s1, delete the info and data files associated with s2 on disk, close all the communication channels, and then quit the program.

3.1 c1 will receive the acknowledge message from s1 (via the regular communication channel), and display the acknowledge message to the user with the format [server name: acknowledge message]
3.2.1 c1 will receive the acknowledge message from s2 (via the regular communication channel), and display the acknowledge message, then close the communication channels set up for the [delete] command
3.2.2 c1 will receive the [delete] message from s2 via the listening channel, then remove s2 from the [servers] and close the listen channel connected to s2, but the listen channel connected to s1 is still open
 
3.3 c2 will receive the [delete] message from s2 via the listening channel and remove s2 from the [servers] and close the listen channel connected to s2.

I believe the cause of the problem comes from 3.2.1 and 3.2.2: 
In most cases, 3.2.1 happens before 3.2.2 (c1 receives the acknowledge message earlier than the [delete] message from s2) and there is no problem at all. 
However, in the case 3.2.2 happens before 3.2.1 (c1 receives the [delete] message earlier than the acknowledge message from s2), c1 will remove s2 from the [servers] first, and the size of [servers] will decrease from 2 to 1. However, in 3.2.1, when c1 displays the acknowledge message, it will try to also display the server name [s2] by accessing the name info in [servers] (servers.get(1).getName()). However, now the size of [servers] is 1 and servers.get(1) will cause [array index out-of-bound exception].